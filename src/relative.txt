import Peer, { DataConnection } from "peerjs";
import { createEffect, createSignal } from "solid-js";
import { handlePuckRacketsCollision, handlePuckTableCollision } from "./Game";

const HOST_PEER_ID = "dbd71e16-01c9-43f1-a75b-e916ddc60e10";

function displayTable() {
  const [pointerY, setPointerY] = createSignal(0);
  function handlePointerMove(event: PointerEvent) {
    const t = event.currentTarget;
    console.log(t);
    //setPointerY(event.);
  }
  return (
    <>
      <div class="h-auto max-w-5xl" onPointerMove={handlePointerMove}>
        <div class="relative top-[15px] left-[-15px] max-w-[12%]">
          <img src="src/images/red.png" />
        </div>
        <div class="m-auto">
          <img src="src/images/white_table_complete.png" />
          <p>{pointerY()}</p>
        </div>
      </div>
    </>
  );
}

function App() {
  const userType = window.location.hash.slice(1);
  if (userType == "host") {
    const peer = new Peer(HOST_PEER_ID);
    peer.on("open", () => {
      peer.on("connection", (conn) => {
        //conn = c;
        //conn.on("data", (data) => {});
      });
    });
  } else {
    // Guest
    const peer = new Peer();
    peer.on("open", (id) => {
      //hostConn = peer.connect(HOST_PEER_ID);
      //hostConn.on("open", () => {
      //hostConn.on("data", (data) => {});
      //});
    });
  }
  if (userType == "host") {
    setInterval(() => {
      if (handlePuckTableCollision() || handlePuckRacketsCollision()) {
        //peerConn.send( {rackets(), puck()} );
      }
    }, 1);
  }
  /*
  const [windowWidth, setWindowWidth] = createSignal(window.innerWidth);
  createEffect(() => {
    console.log(window.innerWidth);
  });
  return <div class="h-screen w-full flex">{displayTable()}</div>;
  */
}

export default App;
